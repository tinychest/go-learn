package regex

// 【说明】
// 当前包下提供了丰富了测试样例，样例中表达式应该通过 Alt + Enter → “Inject language or reference” → "GoRegExp"
// 去查看，这样可以使得正则语法高亮
// 或者直接加上注释 "//language=GoRegExp"
//
// 【参考】
// 3y：https://mp.weixin.qq.com/s/LAj7my21h_gnOPEMMBzQBw
// 官方：https://pkg.go.dev/regexp/syntax
//
// 【特殊字母】
// [\d] 任意数字 [0-9]
// [\D] 任意非数字 [^0-9]
// [\w] 任意字母数字下划线（不包括汉字） [0-9A-Za-z_]
// [\W] 任意非字母数字下划线 [^0-9A-Za-z_]
// [\s] 任意空白符 [\t\n\f\r ]
//   - [\r] 回车符
//   - [\n] 换行符
//   - [\f] 换页符
//   - [\t] 制表符
// [\S] 任意非空白字符 [^\t\n\f\r ]
//
// [\Q] 和 [\E]
//  Go 中，有 `（反引号） 符号，可以将括起来的内容作为字符串对待，无视特殊字符的含义
// （特殊字符是指能够表达源码语法的字符）
// 正则表达式中，也有类似的概念
//
// 【特殊字符】
// [.] 可表示任意一个字符
// [?] 修饰左边的字符或者组，表示 0 个或 1 个；在匹配查询的场景中，还有贪婪和非贪婪的概念（详见 find_greed_test）
// [+] 修饰左边的字符或者组，表示 1 个或 多个
// [*] 修饰左边的字符或者组：表示 0 个或 多个
// [{}] 修饰左边的字符或者组，{m} 出现 m 次，{m,} 出现至少 m 次，{m,n} 出现 m 到 n 次
// [()] 组（详见 group_test）
// [[]] ^[abc]$ 表示一个字符，a | b | c；^[^abc]$ 表示一个字符，除去 a b c 的任意一个字符；^[a-z]$ 表示 a 到 z 的任意一个字符
// [|] 表示或
//
// 【模式】
// [回溯]
// [贪婪模式] 尽可能多匹配（会进行回溯）
// [非贪婪模式] 尽可能少匹配（会进行回溯）
// [独占模式] 尽可能多匹配（不会进行回溯，发现匹配不上就报错）「Go 不支持」
//
// [注释]（没有注释语法） Embedded comments are not supported in this regex dialect
//
// 【分组】
// 详见 group_test
//
// 【断言】
// [\b] 表示单词边界，一般来说就是左右两边都是空格的独立单词 at ASCII word boundary (\w on one side and \W, \A, or \z on the other)
// [\B] not at ASCII word boundary
//
// [^] 脱字符，表示正则表达式开头对齐目标串的开头；在中括号的 或 逻辑中，还可以表达否定的含义（详见 tuo_test）
// [$] 美元符，表示正则表达式结尾对齐目标串的结尾
// 用于格式匹配场景，而不是匹配查询场景；二者没有强制一定要一起使用
//
// [\A] at beginning of text
// [\z] at end of text
//
// [零宽断言] 「Go 不支持」
// 有时候我们需要捕获的内容前后要求是指定的内容，但是又不捕获这些要求的内容，这个时候就应该使用零宽断言的正则表达式了
// 什么是零宽度？ - 零宽度的匹配，就是说匹配到内容不会保存到匹配结果中
// 什么是断言？ - 就是一种特定的匹配限定条件，规定位置的前后必须满足条件才能使希望匹配的表达式匹配上，像是一种对希望匹配的字符串的邻居的条件
// 但是，前后的断言语法是不同，所以再按照如下分类
// [环视]
// - [后顾] (x)(?=y) 后面是 y 的 x
// - [前瞻] (?<=x)y 前面是 x 的 y
// - [后顾（否定）] (x)(?!y) 后面不是 y 的 x
// - [前瞻（否定）] (?<!x)y 前面不是 x 的 y
// - [进阶用法 - 不包含]
//     以 error 开头但是不包含 timeout 为例："^error((?!timeout).)*$"
//     可以这样理解，error 后面每一个字符，前面都不是 timeout，也就是后面不含 timeout
//
// 【其他】
// [中文字符] 详见 chinese_test
// [back-reference] 详见 back_reference_test 「Go 不支持」
