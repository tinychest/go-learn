package _chain

/*
【责任链模式】

将请求的发送和接收解耦，让多个接收对象都有机会处理这个请求，将这些接收对象串成一条链，并沿着这条链传递这个请求，直到链上的某个接收对象能够处理它为止。
（有一种变体是每个对象都能处理）

【使用场景】
复用和拓展，在实际的项目开发中比较常用，特别是框架开发中，我们可以利用他们来提供框架的拓展点，能够让框架的使用者在不修改框架源码的情况下，基于拓展点定制化框架的功能。
如：过滤器、中间件等

【实现】
链表、数组

gin 的 “middleware” 概念就采用了这个设计模式
*/
