package _visitor

/*
【访问者模式】
对一组对象进行一系列不相关的业务操作，但为了避免不断添加的功能导致类不断膨胀，职责越来越不单一；也避免频繁的添加功能导致的频繁代码修改

【解决】
将对象与操作解耦，将这些业务操作抽离出来，定义在独立细节的访问类

但是缺点也是比较致命的，因为不好理解，尽量不要在项目关中使用，会给他人的代码阅读带来不好的体验

【实现】
执行哪个对象的方法 (1)根据对象的运行时类型来决定 (2)或者根据方法参数的编译时类型决定
执行对象的哪个方法 (1)根据方法参数的运行时类型 (2)或者根据对象的运行时类型

(1) + (1) 不要使用访问者模式

这个模式主要基于继承和函数重载这两个 Go 中没有的特性
因为不知道传递过来的对象时什么类型，那么只能通过类型断言去实现
因为没有函数重载，反而不需要访问者模式，直接传参就好

我们常说不要用写其他语言的方式来写 Go，Go 不需要太多的设计模式，这就是一个比较鲜明的例子

*/
